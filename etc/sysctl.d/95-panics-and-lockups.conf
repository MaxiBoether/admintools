# reboot after this many seconds of panic:
kernel.panic = 60

# don't panic on oops (i.e., tolerate oops and rely on the watchdogs
# to check minimal required system health) but go on if possible
kernel.panic_on_oops = 0

# seconds after which assume a hard lockup (*2 for soft lockups)
kernel.watchdog_thresh = 60

# enable detection of hard lockups
kernel.nmi_watchdog = 1
# in which case a user space watchdog might not work anymore as well,
# so panic (and reboot, see above):
kernel.hardlockup_panic = 1

# enable detection of soft lockups:
kernel.soft_watchdog = 1
# but reboots on soft lockups are better handled by a user space
# watchdog, because:
# * CPUs might be soft locked up but there might be enough CPUs left to
#   handle the system load (if not, see next point)
# * CPUs might not be soft locked up but system too overloaded to
#   schedule the user space watchdog
# * user space watchdog has more flexible configuration
#   (e.g., priority, custom checks)
kernel.softlockup_panic = 0
