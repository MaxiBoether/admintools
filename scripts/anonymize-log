#!/bin/sh
''':'
exec python3 -OO "$0" "$@"
'''
# The above is a little hack to use arguments in the shebang.

__doc__ = """\
This script is intended to anonymize log files.
Currently, IPv4, IPv6 and email addresses are considered.
False positives are more tolerable than false negatives.
Effectiveness over efficiency.
"""



import argparse

from logging import getLogger, DEBUG, INFO, debug, info, error
from abc import ABCMeta, abstractmethod
from sys import stdin, stdout
from re import compile as compile_re, IGNORECASE
from tempfile import mkstemp
from shutil import copy
from os import remove



class Cleaner(object):

  def __init__(self):
    self._jobs = []

  def add_job(self, func, *args, **kwargs):
    self._jobs.append((func, args, kwargs))

  def do_all_jobs(self):
    while self._jobs:
      self.do_one_job()

  def do_one_job(self):
    # in reverse order:
    func, args, kwargs = self._jobs.pop()
    debug("cleanup: func=%s.%s, args=%r, kwargs=%r", func.__module__,
          func.__name__, args, kwargs)
    func(*args, **kwargs)



class LineProcessorRegistry(object, metaclass=ABCMeta):
  """
  Concrete subclasses of ``LineProcessorBase`` register at this class.
  """
  items = set()
  register = items.add



class LineProcessorBase(object, metaclass=ABCMeta):
  """
  A common base class for all line processors.
  """

  @staticmethod
  def anonymize_string(string, max_ratio_to_keep=.5, keep_right=False):
    char_count = len(string)
    char_count_to_keep = int(char_count * max_ratio_to_keep)
    if keep_right:
      return '...' + string[-char_count_to_keep:]
    return string[:char_count_to_keep] + '...'


  def __init__(self, argparser):
    """ called initially, mainly to enable the addition of arguments """
    pass

  def setup(self, parsed_args):
    """ called once prior checks (i.e. calls to ``process``) """
    pass

  @abstractmethod
  def process(self, line):
    """ returns processes ``line`` """
    pass



class RegexpLineProcessorBase(LineProcessorBase, metaclass=ABCMeta):
  """ anonymizes lines using regular expressions """

  def __init__(self, _):
    self.pattern = compile_re(self.__class__.REGEXP, IGNORECASE)

  def process(self, line):
    """ returns processes ``line`` """
    for match in self.pattern.finditer(line):
      matched_string = match.group(0)
      replace_string = self._get_replace(matched_string)
      line = line.replace(matched_string, replace_string, 1)
    return line



@LineProcessorRegistry.register
class Ipv4Processor(RegexpLineProcessorBase):
  """ replaces IPv4 addresses with '0.0.0.0' """

  # thanks to https://stackoverflow.com/a/106223 (adapted)
  REGEXP = r'\.'.join(
    (r'(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])', ) * 4
  )

  @staticmethod
  def _get_replace(matched_string):
    """ anonymizes single IPv4 address """
    left, right = matched_string.rsplit('.', 1)
    right = 'x'
    return '%s.%s' % (left, right)



@LineProcessorRegistry.register
class Ipv6Processor(RegexpLineProcessorBase):
  """ replaces IPv6 addresses with '0:0:0:0:0:0:0:0' """

  # thanks to https://gist.github.com/dfee/6ed3a4b05cfe7a6faf40a2102408d5d8
  REGEXP = r'(?:(?:(?:(?:[0-9a-fA-F]){1,4}):){1,4}:[^\s:](?:(?:(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])))|(?:::(?:ffff(?::0{1,4}){0,1}:){0,1}[^\s:](?:(?:(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])))|(?:fe80:(?::(?:(?:[0-9a-fA-F]){1,4})){0,4}%[0-9a-zA-Z]{1,})|(?::(?:(?::(?:(?:[0-9a-fA-F]){1,4})){1,7}|:))|(?:(?:(?:[0-9a-fA-F]){1,4}):(?:(?::(?:(?:[0-9a-fA-F]){1,4})){1,6}))|(?:(?:(?:(?:[0-9a-fA-F]){1,4}):){1,2}(?::(?:(?:[0-9a-fA-F]){1,4})){1,5})|(?:(?:(?:(?:[0-9a-fA-F]){1,4}):){1,3}(?::(?:(?:[0-9a-fA-F]){1,4})){1,4})|(?:(?:(?:(?:[0-9a-fA-F]){1,4}):){1,4}(?::(?:(?:[0-9a-fA-F]){1,4})){1,3})|(?:(?:(?:(?:[0-9a-fA-F]){1,4}):){1,5}(?::(?:(?:[0-9a-fA-F]){1,4})){1,2})|(?:(?:(?:(?:[0-9a-fA-F]){1,4}):){1,6}:(?:(?:[0-9a-fA-F]){1,4}))|(?:(?:(?:(?:[0-9a-fA-F]){1,4}):){1,7}:)|(?:(?:(?:(?:[0-9a-fA-F]){1,4}):){7,7}(?:(?:[0-9a-fA-F]){1,4}))'

  @staticmethod
  def _get_replace(matched_string):
    """ anonymizes single IPv6 address """
    segments = matched_string.split(':')
    segments[0] = 'x'
    segments[-1] = 'x'
    return ':'.join(segments)



@LineProcessorRegistry.register
class EmailProcessor(RegexpLineProcessorBase):
  """ replaces IPv6 addresses with '0:0:0:0:0:0:0:0' """

  # thanks to https://stackoverflow.com/a/201378
  REGEXP = r'(?:[a-z0-9!#$%&\'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&\'*+/=?^_`{|}~-]+)*|\"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])'

  @classmethod
  def _get_replace(cls, matched_string):
    """ anonymizes single email address """
    left, right = matched_string.rsplit('@', 1)
    left = cls.anonymize_string(left)
    right = cls.anonymize_string(right, keep_right=True)
    return '%s@%s' % (left, right)



def main():
  """
  Wrapper around actual main procedure.

  Will hold back uncaught exceptions of the (called)main procedure,
  will run clean up jobs, and will raise the held exception afterwards.
  """

  cleaner = Cleaner()
  abnormal_termination = False
  try:
    caught_main(cleaner)
  except Exception as exception:
    error("abnormal termination (see error at end of output)")
    abnormal_termination = True
    raise exception
  finally:
    debug("running cleanup jobs")
    cleaner.do_all_jobs()

  if abnormal_termination:
    exit(1)
  else:
    debug("success - bye")



def caught_main(cleaner):
  """
  Actual main procedure.

  Uncaught exceptions will be handled in calling procedure.
  """

  parser = argparse.ArgumentParser(
    description=__doc__,
    formatter_class=argparse.ArgumentDefaultsHelpFormatter
  )

  parser.add_argument('-d', '--debug', action='store_true', default=False,
                      help='turn on debug messages')
  parser.add_argument('-v', '--verbose', action='store_true', default=False,
                      help='turn on verbose messages')
  parser.add_argument('--inplace', action='store_true', default=False,
                      help='replace input file (out_file will be ignored)')
  parser.add_argument('in_file', nargs='?', default='-',
                      help='file to read from, stdin: -')
  parser.add_argument('out_file', nargs='?', default='-',
                      help='file to write to, stdout: -')
  # initialize processors
  processors = set(Processor(parser)
                   for Processor in LineProcessorRegistry.items)

  args = parser.parse_args()

  # set up logger
  logger = getLogger()
  logger.name = ""
  if args.debug:
    logger.setLevel(DEBUG)
  if args.verbose:
    logger.setLevel(INFO)

  debug('setting up processors')
  for processor in processors:
    debug('setting up %s', processor)
    processor.setup(args)

  debug('open input file "%s"', args.in_file)
  if args.in_file == '-':
    in_file = stdin
  else:
    in_file = open(args.in_file, 'r')
  cleaner.add_job(in_file.close)

  if args.inplace:
    debug('create temporary file for in-place mode')
    out_file, args.out_file = mkstemp()
    cleaner.add_job(remove, args.out_file)

  debug('open output file "%s"' % args.out_file)
  if args.out_file == '-':
    out_file = stdout
  else:
    out_file = open(args.out_file, 'a')
  cleaner.add_job(out_file.close)

  debug('doing argument sanity checks')
  if args.inplace and in_file == stdin:
    error('Cannot modify stdin --inplace.')
    exit(1)

  info('processing lines')
  for line in in_file:
    for processor in processors:
      line = processor.process(line)
    out_file.write(line)

  cleaner.do_one_job() # closes out_file

  if args.inplace and in_file != stdin:
    assert out_file != stdout
    info('replacing input file')
    copy(out_file.name, in_file.name)

  info('all done')

if __name__ == '__main__':
  main()
