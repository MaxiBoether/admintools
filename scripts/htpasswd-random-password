#!/usr/bin/env python3

"""Sets a random password in a htpasswd file where the "random password"
is generated by choosing random lines from specified files."""

DISCLAIMER = "DO NOT USE THIS FOR NON-NEAR-ZERO CONFIDENTIALITY REQUIREMENTS"
DISCLAIMER += " AND KEEP YOUR WORD LISTS SECRET."

import argparse
import logging
from random import choice
from email.mime.text import MIMEText
from subprocess import Popen, PIPE, check_call
from socket import getfqdn

if __name__ != '__main__':
  raise NotImplementedError(
    "Sorry, there is nosite to include - this is a CLI tool."
  )

def input_yes_xor_no(question):
  while True:
    answer = input("%s (y/n) " % question)
    if answer == "y":
      return True
    elif answer == "n":
      return False
    else:
      continue

parser = argparse.ArgumentParser(
  description="%s (%s)" % (__doc__, DISCLAIMER),
  formatter_class=argparse.ArgumentDefaultsHelpFormatter,
  epilog=DISCLAIMER
)

parser.add_argument('-d', '--debug', action='store_true', default=False,
                    help='turn on debug messages')
parser.add_argument('-s', '--sender', default="webmaster", help='email from')
parser.add_argument('-p', '--place', default="%s" % getfqdn(),
                    help='where the password can be used, ' +
                         'e.g. a URL: http://example.com/share')
parser.add_argument('-r', '--recipient', required=True,
                    help='user\'s email address where the ' +
                         'PASSWORD WILL BE SENT TO IN CLEAR TEXT')
parser.add_argument('-f', '--htpasswd-file', required=True,
                    help='htpasswd file to modify')
parser.add_argument('-u', '--username', required=True,
                    help='user name to set password for')
parser.add_argument('wordlists', nargs='+', metavar="wordlist",
                    help='file containing list of words (one per line) ' +
                         ' to choose from - ' +
                         'first list is for the first word of the password, ' +
                         'second for the second word, etc.')
parser.add_argument('-c', '--choose', action='store_true', default=False,
                    help='choose the password')
parser.add_argument('-y', '--yes', action='store_true', default=False,
                    help='assume yes to all questions')

# display help per default
cli_args = parser.parse_args()

# set up logger
logging.getLogger().name = ""
if cli_args.debug:
  logging.getLogger().setLevel(logging.DEBUG)

# get random words and join them to a password
while True:
  words = []
  logging.debug("word lists: %r", cli_args.wordlists)
  for wordlist_file_name in cli_args.wordlists:
    while True:
      lines = open(wordlist_file_name).readlines()
      line = choice(lines)
      word = line.strip()
      if word and not word.startswith("#"):
        words.append(word)
        break
  password = " ".join(words)
  if not cli_args.choose or cli_args.yes:
    break
  elif input_yes_xor_no("Is the password '%s' okay?" % password):
    break

body_lines = [
  "place: %s" % cli_args.place,
  "user: '%s'" % cli_args.username,
  "pass: '%s'" % password,
  "",
  "(both without the ')",
]
msg = MIMEText("\n".join(body_lines))
msg["From"] = cli_args.sender
msg["To"] = cli_args.recipient
msg["Subject"] = "your credentials for %s" % cli_args.place
msg_string = msg.as_string()

if not cli_args.yes:
  print()
  for line in msg_string.splitlines():
    print("  %s" % line)
  print()
  if not input_yes_xor_no("Is the above correct?"):
    exit(1)

# set the password in the htpasswd file:
htpasswd_args = ["/usr/bin/env", "htpasswd", "-b", cli_args.htpasswd_file,
                 cli_args.username, password]
logging.debug("calling %r", htpasswd_args)
check_call(htpasswd_args)

# send email to the user:
logging.debug("message is:")
logging.debug(msg_string)
process = Popen(["/usr/bin/env", "sendmail", "-t", "-oi"], stdin=PIPE)
process.communicate(msg_string.encode("utf-8"))

logging.debug("done")
