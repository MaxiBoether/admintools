#!/usr/bin/env python3

"""
This script waits for the specified conditions to be met, forever.

This can be useful for cron jobs on notebooks, e.g. to defer
their execution until the system is on-line and on AC.

To set a timeout, use coreutils' `timeout` utility.
"""

from sys import stdout, stderr, argv, version_info
import argparse
from logging import getLogger, INFO, info, error
from subprocess import DEVNULL, call as subprocess_call
from abc import ABCMeta, abstractmethod
from time import sleep
import socket
from getpass import getuser
from hashlib import md5
from os.path import isfile

EXIT_CODE_ARGUMENT_ERROR = 2



class Call(object):
  """
  This class partly mocks ``subprocess.run`` and
  ``subprocess.CompletedProcess`` available in Python >= 3.5, since we
  cannot rely on running the aforementioned version (yet).
  """

  def __init__(self, args, *call_args, silent=True, **call_kwargs):
    """
    Calls the subprocess with the specified arguments and sets instance
    variables accordingly.
    """

    if getLogger().level <= INFO or not silent:
      call_kwargs.setdefault("stdout", stdout)
      call_kwargs.setdefault("stderr", stderr)
    else:
      call_kwargs.setdefault("stdout", DEVNULL)
      call_kwargs.setdefault("stderr", DEVNULL)

    info("running '%s'", " ".join(args))
    self.returncode = subprocess_call(args, *call_args, **call_kwargs)



class ConditionRegistry(object, metaclass=ABCMeta):
  """
  Concrete subclasses of ``BaseCondition`` register at this class.
  """
  items = set()
  register = items.add



class BaseCondition(object, metaclass=ABCMeta):
  """
  A common base class for all conditions.
  """

  def __init__(self, argparser):
    """ called initially, mainly to enable the addition of arguments """
    self.timeout = None


  def setup(self, parsed_args):
    """ called once prior checks (i.e. calls to ``met``) """
    self.timeout = parsed_args.timeout

  @abstractmethod
  def met(self):
    """ returns ``True``,  ``False`` or ``None`` (i.e. deactivated) """
    pass

  @abstractmethod
  def __str__(self):
    pass



@ConditionRegistry.register
class PingCondition(BaseCondition):
  """ checks if a host is pingable """

  def __init__(self, argparser):
    super().__init__(argparser)
    argparser.add_argument("-p", "--ping", metavar="HOST",
                           help=self.__class__.__doc__)
    self.ip = None

  def setup(self, parsed_args):
    super().setup(parsed_args)
    self.ip = parsed_args.ping

  def met(self):
    if not self.ip:
      return None
    call = Call(("ping", "-c", "1", "-W", str(self.timeout), self.ip))
    return call.returncode == 0

  def __str__(self):
    if self.ip:
      return "ping %s" % self.ip
    else:
      return "deactivated ping condition"

@ConditionRegistry.register
class PortOpenCondition(BaseCondition):
  """ checks if port is reachable """

  HOST_PORT_SEP = ":"

  def __init__(self, argparser):
    super().__init__(argparser)
    argparser.add_argument("-P", "--port", metavar="host:port",
                           help=self.__class__.__doc__)
    self.host = None
    self.port = None

  def setup(self, parsed_args):
    super().setup(parsed_args)

    host_and_port = parsed_args.port

    if host_and_port is None:
      return

    try:
      self.host, self.port = host_and_port.rsplit(self.HOST_PORT_SEP)
    except ValueError:
      error("argument for 'host:port' seems to be malformed")
      exit(EXIT_CODE_ARGUMENT_ERROR)

    try:
      self.port = int(self.port)
    except ValueError:
      error("'port' in argument for 'host:port' does not look like a port")
      exit(EXIT_CODE_ARGUMENT_ERROR)

  def met(self):
    if not self.host or not self.port:
      return None

    sock = socket.socket()
    sock.settimeout(self.timeout)

    try:
      sock.connect((self.host, self.port))
    except (ConnectionRefusedError, socket.timeout, socket.timeout,
            socket.gaierror):
      return False
    else:
      sock.close()
      return True

    raise RuntimeError("shouldn't get here – please report this bug")

  def __str__(self):
    if self.host and self.port:
      return "connect to %s:%i" % (self.host, self.port)
    else:
      return "deactivated ping condition"



@ConditionRegistry.register
class OnACCondition(BaseCondition):
  """ checks if the system is on AC """

  AC_IS_ONLINE_FILE = "/sys/class/power_supply/AC/online"

  def __init__(self, argparser):
    super().__init__(argparser)
    argparser.add_argument("-a", "--ac", action="store_true",
                           help=self.__class__.__doc__)
    self.ac = None

  def setup(self, parsed_args):
    super().setup(parsed_args)
    self.ac = parsed_args.ac

  def met(self):
    if not self.ac:
      return None
    if not isfile("/sys/class/power_supply/AC/online"):
      return True
    with open(self.AC_IS_ONLINE_FILE) as online_fp:
      return online_fp.readline().startswith("1")

  def __str__(self):
    if self.ac:
      return "on AC condition"
    else:
      return "deactivated on AC condition"



@ConditionRegistry.register
class UUIDCondition(BaseCondition):
  """ checks whether the specified UUID is available """

  def __init__(self, argparser):
    super().__init__(argparser)
    argparser.add_argument("-u", "--uuid",
                           help=self.__class__.__doc__)
    self.uuid = None

  def setup(self, parsed_args):
    super().setup(parsed_args)
    self.uuid = parsed_args.uuid

  def met(self):
    if not self.uuid:
      return None
    result = Call(("blkid", "-U", self.uuid))
    return result.returncode == 0

  def __str__(self):
    if self.uuid:
      return "UUID %s is available" % self.uuid
    else:
      return "deactivated UUID condition"


def wait_for_conditions_to_be_met(conditions, check_interval):
  """
  Periodically (``check_interval``) checks all conditions and returns
  once all are met.
  """

  while True:
    all_met = True

    for condition in conditions:

      met = condition.met()

      if met is True:
        continue
      elif met is False:
        info("not met: %s", condition)
        all_met = False
        break
      elif met is None:
        # ``None`` i.e. inactive
        pass
      else:
        raise RuntimeError("shouldn't get here – please report this bug")

    if all_met:
      break
    else:
      info("sleeping %i seconds until next check", check_interval)
      sleep(check_interval)


def main():
  """ first function executed when script is called """

  argparser = argparse.ArgumentParser(
    description=__doc__,
    formatter_class=argparse.ArgumentDefaultsHelpFormatter
  )

  argparser.add_argument('-v', '--verbose', action='store_true',
                         default=False, help='turn on verbose messages')
  argparser.add_argument('-i', '--interval', type=int, default=57,
                         help='time to wait between checks (seconds)')
  argparser.add_argument('-t', '--timeout', type=int, default=7,
                         help='timeout per check (seconds)')
  argparser.add_argument('-s', '--single', action='store_true', default=False,
                         help=('exit with success if another instance ' +
                               'is waiting for this command already'))
  argparser.add_argument('command', nargs=argparse.REMAINDER,
                         help=('Command and arguments to run after ' +
                               'conditions are met.'))

  conditions = set(Condition(argparser)
                   for Condition in ConditionRegistry.items)

  args = argparser.parse_args()

  # set up logger
  getLogger().name = ""
  if args.verbose:
    getLogger().setLevel(INFO)

  if args.single:
    user = getuser()
    instance_hash = md5(argv.__str__().encode()).hexdigest()
    try:
      sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
      sock.bind('\0wait_for_%s_%s' % (user, instance_hash))
    except socket.error:
      info("user %s already running %s", user,
           ' '.join(args.command))
      exit(0)

  for condition in conditions:
    condition.setup(args)

  wait_for_conditions_to_be_met(conditions, args.interval)

  if args.command:
    Call(args.command, silent=False)

if __name__ == '__main__':
  main()
